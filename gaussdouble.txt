double det()
{
    double mem = 1;
    for (int i = 0; i < n_; ++i)
    {
        if (i == (n_ - 1))
            continue;

        if (matrix_[i][i] == 0)
        {

            for (int k = i; k < n_; ++k)
            {
                if (matrix_[k][i] != 0)
                {
                    std::swap_ranges(matrix_[i], matrix_[i] + n_, matrix_[k]);
                    mem *= pow((-1), (k - i));
                    break;
                }
                if (k == n_ - 1)
                    return 0; //тут на диагонали - 0, и под ним тоже нули
            }                 //после этих действий matrix_[i][i] != 0
        }

        for (int k = i + 1; k < n_; ++k)
        {
            if (matrix_[k][i] == 0)
                continue;

            mem *= matrix_[k][i];

            double tmp = matrix_[k][i] / matrix_[i][i], tmp1 = matrix_[i][i];
            for (int c = 0; c < n_; ++c)
            {
                matrix_[i][c] *= tmp;
            }

            for (int c = 0; c < n_; ++c)
                matrix_[k][c] -= matrix_[i][c];

            for (int c = 0; c < n_; ++c)
                matrix_[i][c] *= tmp1;
        }
    }

    double det = 1;
    for (int i = 0; i < n_; ++i)
        det *= matrix_[i][i];

    det /= mem;
    return det;
}