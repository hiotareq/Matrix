/*
The main idea of this method is tho make two triangle-matrices from given and
calculate product of elements from main diagonals
LU-decomposition is possible only if matrix 1)non-degenerate 2)main minors aren't 0-s
1) easily checked by if(l[i][i] == 0)
2)idk know good enough way to check main minors fast
*/
double det()
        {
            matrix l(n_), u(n_);

            /*
            here needs to check if main minors are equal to zero and
            somehow make them nonzero.
            idk how to do that in a proper way...
            */

            for (int i = 0; i < n_; ++i)
            {
                for (int j = 0; j < n_; ++j)
                {
                    if (j < i)
                        l[j][i] = 0;
                    else
                    {
                        l[j][i] = matrix_[j][i];
                        for (int k = 0; k < i; ++k)
                        {
                            l[j][i] = l[j][i] - l[j][k] * u[k][i];
                        }
                    }
                }
                for (int j = 0; j < n_; ++j)
                {
                    if (j < i)
                        u[i][j] = 0;
                    else if (j == i)
                        u[i][j] = 1;
                    else
                    {
                        if (l[i][i] == 0)
                            return 0; //we know there is zero in main diagonal of l
                        u[i][j] = matrix_[i][j] / l[i][i];
                        for (int k = 0; k < i; ++k)
                        {
                            u[i][j] = u[i][j] - ((l[i][k] * u[k][j]) / l[i][i]);
                        }
                    }
                }
            }
            float d = 1;
            for (int i = 0; i < n_; ++i)
            {
                d *= l[i][i] * u[i][i];
            }
            return d;
        }

        int prepare_minors()
        {
            int mem = 1;
            if (matrix_[n_ - 1][n_ - 1] == 0)
            {
                for (int k = 0; k < n_; ++k)
                {
                    if (matrix_[k][n_ - 1] != 0)
                    {
                        for (int j = 0; j < n_; ++j)
                        {
                            matrix_[n_ - 1][j] += matrix_[k][j];
                            break;
                        }
                    }
                    if (k == n_ - 1)
                        return 0; //we know that there is a column with only 0-s
                }
            }

            for (int i = 2; i < (n_ - 2); ++i)
            {
                matrix<T> tmp(i);
                for (int j = 0; j < i; ++j)
                {
                    for (int k = 0; k < i; ++k)
                    {
                        tmp[j][k] = matrix_[n_ + j - i][n_ + k - i];
                    }
                }
                while (tmp.det() == 0)
                {
                    for (int k = 0; k < n_; ++k)
                    {
                        if (k == (n_ - i))
                            continue;

                        if (matrix_[k][n_ - i] != 0)
                        {
                            for (int j = 0; j < n_; ++j)
                            {
                                matrix_[n_ - i][j] += matrix_[k][j];
                            }
                            for (int j = 0; j < i; ++j)
                            {
                                tmp.matrix_[0][j] += matrix_[n_ - 1 - k][n_ - i + j];
                                break;
                            }

                            if (k == (n_ - 1) && matrix_[n_ - i][n_ - i] == 0)
                                return 0;
                            if (k == (n_ - 1) && matrix_[n_ - i][n_ - i] != 0)
                            {
                                for (int j = 0; j < n_; ++j)
                                {
                                    matrix_[n_ - i][j] += tmp.matrix_[0][0];
                                }
                                for (int j = 0; j < i; ++j)
                                {
                                    tmp.matrix_[0][j] += tmp.matrix_[0][0];
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            return mem;
        }

        double det()
        {
            matrix l(n_), u(n_);

            float d = 1;

            d *= (*this).prepare_minors();

            for (int i = 0; i < n_; ++i)
            {
                for (int j = 0; j < n_; ++j)
                {
                    if (j < i)
                        l[j][i] = 0;
                    else
                    {
                        l[j][i] = matrix_[j][i];
                        for (int k = 0; k < i; ++k)
                        {
                            l[j][i] = l[j][i] - l[j][k] * u[k][i];
                        }
                    }
                }
                for (int j = 0; j < n_; ++j)
                {
                    if (j < i)
                        u[i][j] = 0;
                    else if (j == i)
                        u[i][j] = 1;
                    else
                    {
                        if (l[i][i] == 0)
                            return 0; //we know there is zero in main diagonal of l
                        u[i][j] = matrix_[i][j] / l[i][i];
                        for (int k = 0; k < i; ++k)
                        {
                            u[i][j] = u[i][j] - ((l[i][k] * u[k][j]) / l[i][i]);
                        }
                    }
                }
            }

            for (int i = 0; i < n_; ++i)
            {
                d *= l[i][i] * u[i][i];
            }
            return d;
        }
