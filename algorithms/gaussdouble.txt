/*
The main idea of this method is Gauss method to make upper-triangle matrix from given
and calculate product of elements from main diagonal; without limits for integer
*/
T det()
        {
            long double mem = 1;
            for (int i = 0; i < n_; ++i)
            {
                if (i == (n_ - 1))
                {
                    for(int k = 0; k < n_; ++k)
                    {
                        if(matrix_[k][i] != 0)
                        {
                            for(int j = 0; j < n_; ++j)
                            {
                                matrix_[i][j] += matrix_[k][j];
                                break;
                            }
                        }
                    }
                }

                if (matrix_[i][i] == 0)
                {
                    for (int k = i + 1; k < n_; ++k)
                    {
                        if (matrix_[k][i] != 0)
                        {
                            T* swap = matrix_[i];
                            matrix_[i] = matrix_[k];
                            matrix_[k] = swap;
                            mem *= pow((-1), (k - i));
                            break;
                        }
                        if (k == n_ - 1)
                            return 0; //here is col with 0-s
                    }                 
                }//after these actions matrix_[i][i] != 0

                for (int k = i + 1; k < n_; ++k)
                {
                    if (matrix_[k][i] == 0)
                    {
                        continue;
                    }


                    mem /= matrix_[i][i];
                    mem *= matrix_[k][i];
                    long double tmp1 = matrix_[i][i], tmp2 = matrix_[k][i];

                    for (int c = 0; c < n_; ++c)
                    {
                        matrix_[i][c] /= tmp1;
                        matrix_[i][c] *= tmp2;
                    }

                    for (int c = 0; c < n_; ++c)
                        matrix_[k][c] -= matrix_[i][c];

                    for(int c = 0; c < n_; ++c)
                        matrix_[i][c] *= tmp1;
                }
            }

            long double det = 1;
            for (int i = 0; i < n_; ++i)
                det *= matrix_[i][i];

            det /= mem;
            return det;
        }